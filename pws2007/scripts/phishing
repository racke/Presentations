#! /usr/bin/perl

use strict;
use warnings;

use IO::Socket::SSL;
use Mail::IMAPClient;
use ClamAV::Client;

use PWSConfig;

my ($cref, $clam, $conn, $imap);

$cref = PWSConfig::setup_vars (required => 'server,user,password,folder');

# initiate ClamAV first
$clam = new ClamAV::Client;

if ($clam) {
	my ($engine, $dbid, $dbdate) = split('/', $clam->version());

	if ($cref->{debug}) {
		print <<EOF;
Engine: $engine
Database release(daily.cvd): $dbid
Database date: $dbdate\n";
EOF
	}
}

unless ($conn = new IO::Socket::SSL("$cref->{server}:imaps")) {
	die "$0: imaps connection to $cref->{server} failed: $!\n";
}
		
$imap = new Mail::IMAPClient (Socket => $conn,
							  User => $cref->{user},
							  Peek => 1,
							  Password => $cref->{password});

# set state manually to "Connected"
$imap->{State} = 1;
$imap->login();

unless ($imap->login()) {
	die "Error: " . $imap->LastError() . "\n";
}

# select phishing folder
unless ($imap->select($cref->{folder})) {
	die "$0: Failed to select IMAP folder $cref->{folder}: " . $imap->LastError() . "\n";
}

my ($subject, $date, $message, $result);

# determine messages
my (@msgs, @badmsgs);

if ($cref->{header}) {
	@msgs = $imap->search('HEADER', $cref->{header},
						  $imap->Quote($cref->{searchtoken}));
	print "Number of messages: " . scalar(@msgs) . "\n";
} elsif ($cref->{subject}) {
	@msgs = $imap->search('SUBJECT', $imap->Quote($cref->{subject}));
} else {
	@msgs = $imap->search('ALL');
}

for my $msgno (reverse(@msgs)) {
	$subject = $imap->subject($msgno) || '';
	$date = $imap->date($msgno) || '';

#	print '#', $msgno, ": $date -- $subject\n";

	# retrieve message
	$message = $imap->message_string($msgno);

	$result = $clam->scan_scalar(\$message);

	if ($result) {
		print '#', $msgno, ": $date -- $subject\n";
		print "$0: INFECTED: $result\n";
		print "MOVE: $cref->{move}\n";
		
		if ($cref->{move}) {
			# move message immediately
			unless ($imap->move($cref->{move}, $msgno)) {
				warn "$0: Failed to move message: " . $imap->LastError();
			}
			my @results = $imap->Results();
			print "Results for MOVE: " . join(@results);
		} else {
			push (@badmsgs, $msgno);
		}
	} else {
#		print "$0: OK\n";
	}
}

$imap->expunge($cref->{folder});
my @results = $imap->Results();
print "Results for EXPUNGE: " . join(@results);

exit 0;

# delete "bad" messages

if (@badmsgs) {
	my @results;

#	unless ($imap->delete_message(@badmsgs)) {
#		warn "$0: Failed to delete messages: " . $imap->LastError() . "\n";
#	}

	@results = $imap->Results();
	print "Results for DELETE: " . join("\n", @results) . "\n";
	
	unless ($imap->close()) {
		warn "$0: Failed to close: " . $imap->LastError() . "\n";
	}

	@results = $imap->Results();
	print "Results for DELETE: " . join("\n", @results) . "\n";
}
	
	
